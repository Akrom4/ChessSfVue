security:
    # Register user password hashers
    password_hashers:
        App\Entity\User: 'auto'

    # Define user providers from the User entity using the "username" property
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # Firewall for login requests.
        # This handles the /api/login endpoint where your custom login controller sets the JWT cookie.
        login:
            pattern: ^/api/login
            stateless: true

        # API firewall uses your custom JWT cookie authenticator for all other API routes.
        api:
            pattern: ^/api
            stateless: true
            custom_authenticators:
                - App\Security\JwtCookieAuthenticator

        # Optional: a separate firewall for the main part of your application if needed.
        main:
            lazy: true
            provider: app_user_provider
            stateless: true
            custom_authenticators:
                - App\Security\JwtCookieAuthenticator

    # Access control: public access for the login route; all other /api routes require full authentication.
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
    
when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4
                time_cost: 3
                memory_cost: 10
